/**
 * JavaScript otimizado para a p√°gina de relat√≥rio
 * Performance otimizada com lazy loading e virtual scrolling
 */

// Cache de elementos DOM
const DOM_CACHE = new Map();

// Configura√ß√µes de performance
const PERF_CONFIG = {
  VIRTUAL_SCROLL_THRESHOLD: 100, // Ativar virtual scroll com mais de 100 linhas
  SEARCH_DEBOUNCE: 300,
  PAGINATION_SIZE: 50,
  LAZY_LOAD_THRESHOLD: 0.1,
};

/**
 * Cache otimizado para elementos DOM
 */
function getCachedElement(selector) {
  if (!DOM_CACHE.has(selector)) {
    DOM_CACHE.set(selector, document.querySelector(selector));
  }
  return DOM_CACHE.get(selector);
}

/**
 * Inicializa√ß√£o otimizada da p√°gina de relat√≥rio
 */
function initRelatorioPage() {
  console.log("üöÄ Inicializando p√°gina de relat√≥rio otimizada");

  // Usar requestIdleCallback para inicializa√ß√£o n√£o cr√≠tica
  if ("requestIdleCallback" in window) {
    requestIdleCallback(() => {
      console.log("‚è±Ô∏è Executando inicializa√ß√£o via requestIdleCallback");
      setupTableOptimizations();
      setupSearchOptimizations();
      setupImageModalOptimizations();
      setupPaginationOptimizations();
      console.log("‚úÖ Inicializa√ß√£o completa");
    });
  } else {
    setTimeout(() => {
      console.log("‚è±Ô∏è Executando inicializa√ß√£o via setTimeout");
      setupTableOptimizations();
      setupSearchOptimizations();
      setupImageModalOptimizations();
      setupPaginationOptimizations();
      console.log("‚úÖ Inicializa√ß√£o completa");
    }, 100);
  }
}

/**
 * Otimiza√ß√µes de tabela com virtual scrolling
 */
function setupTableOptimizations() {
  const tables = document.querySelectorAll("table");

  tables.forEach((table) => {
    const rows = table.querySelectorAll("tbody tr");

    // Ativar virtual scrolling apenas para tabelas grandes
    if (rows.length > PERF_CONFIG.VIRTUAL_SCROLL_THRESHOLD) {
      enableVirtualScrolling(table);
    }

    // Lazy loading para c√©lulas com imagens
    enableLazyImageLoading(table);
  });
}

/**
 * Virtual scrolling para tabelas grandes
 */
function enableVirtualScrolling(table) {
  const tbody = table.querySelector("tbody");
  const rows = Array.from(tbody.querySelectorAll("tr"));
  const rowHeight = 50; // Altura estimada da linha
  const containerHeight = Math.min(600, window.innerHeight * 0.6);

  // Criar container com scroll virtual
  const virtualContainer = document.createElement("div");
  virtualContainer.style.cssText = `
    height: ${containerHeight}px;
    overflow-y: auto;
    position: relative;
  `;

  const virtualContent = document.createElement("div");
  virtualContent.style.height = `${rows.length * rowHeight}px`;

  const visibleRows = Math.ceil(containerHeight / rowHeight) + 2; // Buffer
  let startIndex = 0;

  // Renderizar apenas linhas vis√≠veis
  function renderVisibleRows() {
    const scrollTop = virtualContainer.scrollTop;
    const newStartIndex = Math.floor(scrollTop / rowHeight);

    if (Math.abs(newStartIndex - startIndex) < 2) return; // Evitar re-renders desnecess√°rios

    startIndex = newStartIndex;
    const endIndex = Math.min(startIndex + visibleRows, rows.length);

    // Limpar tbody
    tbody.innerHTML = "";

    // Adicionar espa√ßamento superior
    if (startIndex > 0) {
      const spacer = document.createElement("tr");
      spacer.style.height = `${startIndex * rowHeight}px`;
      tbody.appendChild(spacer);
    }

    // Adicionar linhas vis√≠veis
    for (let i = startIndex; i < endIndex; i++) {
      if (rows[i]) {
        tbody.appendChild(rows[i].cloneNode(true));
      }
    }

    // Adicionar espa√ßamento inferior
    if (endIndex < rows.length) {
      const spacer = document.createElement("tr");
      spacer.style.height = `${(rows.length - endIndex) * rowHeight}px`;
      tbody.appendChild(spacer);
    }
  }

  // Throttle do scroll para performance
  virtualContainer.addEventListener("scroll", throttle(renderVisibleRows, 16)); // 60fps

  // Substituir tabela original
  table.parentNode.insertBefore(virtualContainer, table);
  virtualContainer.appendChild(table);

  // Renderiza√ß√£o inicial
  renderVisibleRows();
}

/**
 * Lazy loading para imagens em c√©lulas
 */
function enableLazyImageLoading(table) {
  const imageButtons = table.querySelectorAll(".view-image-btn");

  if ("IntersectionObserver" in window) {
    const imageObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const button = entry.target;
            // Pr√©-carregar a imagem quando o bot√£o fica vis√≠vel
            const imageUrl = button.dataset.image;
            if (imageUrl) {
              const img = new Image();
              img.src = imageUrl;
            }
            imageObserver.unobserve(button);
          }
        });
      },
      { threshold: PERF_CONFIG.LAZY_LOAD_THRESHOLD }
    );

    imageButtons.forEach((button) => imageObserver.observe(button));
  }
}

/**
 * Otimiza√ß√µes de busca com debounce
 */
function setupSearchOptimizations() {
  const searchInputs = document.querySelectorAll(".search-input");

  searchInputs.forEach((input) => {
    const tableId = input.dataset.table;
    const table = document.getElementById(tableId);

    if (!table) return;

    // Cache das linhas originais
    const originalRows = Array.from(table.querySelectorAll("tbody tr"));

    // Fun√ß√£o de busca otimizada
    const optimizedSearch = debounce((searchTerm) => {
      const tbody = table.querySelector("tbody");
      const fragment = document.createDocumentFragment();

      if (!searchTerm.trim()) {
        // Restaurar todas as linhas
        originalRows.forEach((row) => fragment.appendChild(row));
      } else {
        // Busca case-insensitive otimizada
        const lowerSearchTerm = searchTerm.toLowerCase();

        originalRows.forEach((row) => {
          const rowText = row.textContent.toLowerCase();
          if (rowText.includes(lowerSearchTerm)) {
            // Destacar termo encontrado
            highlightSearchTerm(row, searchTerm);
            fragment.appendChild(row);
          }
        });
      }

      // Aplicar resultados de uma vez para evitar reflows
      tbody.innerHTML = "";
      tbody.appendChild(fragment);
    }, PERF_CONFIG.SEARCH_DEBOUNCE);

    input.addEventListener("input", (e) => optimizedSearch(e.target.value));
  });
}

/**
 * Destaca termo de busca no texto
 */
function highlightSearchTerm(row, searchTerm) {
  if (!searchTerm.trim()) return;

  const walker = document.createTreeWalker(
    row,
    NodeFilter.SHOW_TEXT,
    null,
    false
  );

  const textNodes = [];
  let node;

  while ((node = walker.nextNode())) {
    textNodes.push(node);
  }

  textNodes.forEach((textNode) => {
    const text = textNode.textContent;
    const regex = new RegExp(`(${escapeRegex(searchTerm)})`, "gi");

    if (regex.test(text)) {
      const highlightedHTML = text.replace(
        regex,
        '<mark class="search-highlight">$1</mark>'
      );
      const span = document.createElement("span");
      span.innerHTML = highlightedHTML;
      textNode.parentNode.replaceChild(span, textNode);
    }
  });
}

/**
 * Escape regex para busca segura
 */
function escapeRegex(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}

/**
 * Otimiza√ß√µes do modal de imagem
 */
function setupImageModalOptimizations() {
  console.log("üîß Configurando otimiza√ß√µes do modal de imagem");

  // Event delegation otimizado
  document.addEventListener(
    "click",
    (e) => {
      if (e.target.closest(".view-image-btn")) {
        console.log("üëÜ Clique detectado no bot√£o ver imagem");
        e.preventDefault();
        const button = e.target.closest(".view-image-btn");
        const imageUrl = button.dataset.image;

        console.log("üñºÔ∏è URL da imagem:", imageUrl);

        if (imageUrl) {
          openOptimizedImageModal(imageUrl);
        } else {
          console.error("‚ùå URL da imagem n√£o encontrada no dataset");
        }
      }
    },
    { passive: true }
  );
}

/**
 * Modal de imagem otimizado com lazy loading
 */
function openOptimizedImageModal(imageUrl) {
  console.log("üñºÔ∏è Abrindo modal otimizado para:", imageUrl);

  // Usar modal existente do template
  const modal = document.getElementById("imageModal");

  if (!modal) {
    console.error("‚ùå Modal de imagem n√£o encontrado no DOM");
    return;
  }

  console.log("‚úÖ Modal encontrado:", modal);

  const modalImg = modal.querySelector("#modalImage");
  const loadingDiv = modal.querySelector("#imageLoading");
  const errorDiv = modal.querySelector("#imageLoadError");
  const filenameSpan = modal.querySelector("#imageModalFilename");
  const downloadBtn = modal.querySelector("#downloadImageBtn");

  console.log("üîç Elementos do modal:", {
    modalImg: !!modalImg,
    loadingDiv: !!loadingDiv,
    errorDiv: !!errorDiv,
    filenameSpan: !!filenameSpan,
    downloadBtn: !!downloadBtn,
  });

  // Reset do estado
  modalImg.style.display = "none";
  if (loadingDiv) loadingDiv.classList.remove("d-none");
  if (errorDiv) errorDiv.classList.add("d-none");

  // Extrair nome do arquivo da URL
  const filename = imageUrl.split("/").pop() || "imagem";
  if (filenameSpan) filenameSpan.textContent = filename;

  // Configurar download
  if (downloadBtn) {
    downloadBtn.href = imageUrl;
    downloadBtn.download = filename;
  }

  // Lazy load da imagem
  const img = new Image();

  img.onload = function () {
    console.log("‚úÖ Imagem carregada com sucesso");
    modalImg.src = this.src;
    modalImg.style.display = "block";
    if (loadingDiv) loadingDiv.classList.add("d-none");
  };

  img.onerror = function () {
    console.error("‚ùå Erro ao carregar imagem:", imageUrl);
    if (loadingDiv) loadingDiv.classList.add("d-none");
    if (errorDiv) errorDiv.classList.remove("d-none");
    console.error("Erro ao carregar imagem:", imageUrl);
  };

  img.src = imageUrl;

  // Mostrar modal
  if (typeof bootstrap !== "undefined") {
    console.log("üöÄ Mostrando modal com Bootstrap");
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();
  } else {
    console.error("‚ùå Bootstrap n√£o est√° dispon√≠vel");
  }
}

/**
 * Otimiza√ß√µes de pagina√ß√£o
 */
function setupPaginationOptimizations() {
  const tables = document.querySelectorAll("table");

  tables.forEach((table) => {
    const rows = table.querySelectorAll("tbody tr");

    if (rows.length > PERF_CONFIG.PAGINATION_SIZE) {
      enablePagination(table);
    }
  });
}

/**
 * Pagina√ß√£o otimizada
 */
function enablePagination(table) {
  const tbody = table.querySelector("tbody");
  const rows = Array.from(tbody.querySelectorAll("tr"));
  const pageSize = PERF_CONFIG.PAGINATION_SIZE;
  const totalPages = Math.ceil(rows.length / pageSize);
  let currentPage = 1;

  // Criar controles de pagina√ß√£o
  const paginationContainer =
    table.parentNode.querySelector(".pagination")?.parentNode;
  if (paginationContainer) {
    const pagination = createPaginationControls(totalPages, currentPage);
    paginationContainer.appendChild(pagination);

    // Fun√ß√£o para mostrar p√°gina
    function showPage(page) {
      const start = (page - 1) * pageSize;
      const end = start + pageSize;

      // Fragment para performance
      const fragment = document.createDocumentFragment();

      for (let i = start; i < end && i < rows.length; i++) {
        fragment.appendChild(rows[i]);
      }

      tbody.innerHTML = "";
      tbody.appendChild(fragment);

      updatePaginationControls(pagination, page, totalPages);
      currentPage = page;
    }

    // Event delegation para pagina√ß√£o
    pagination.addEventListener("click", (e) => {
      e.preventDefault();
      const pageBtn = e.target.closest("[data-page]");
      if (pageBtn) {
        const page = parseInt(pageBtn.dataset.page);
        if (page && page !== currentPage) {
          showPage(page);
        }
      }
    });

    // Mostrar primeira p√°gina
    showPage(1);
  }
}

/**
 * Throttle function para performance
 */
function throttle(func, limit) {
  let inThrottle;
  return function () {
    if (!inThrottle) {
      func.apply(this, arguments);
      inThrottle = true;
      setTimeout(() => (inThrottle = false), limit);
    }
  };
}

/**
 * Debounce function para performance
 */
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func.apply(this, args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Inicializar quando DOM estiver pronto
if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", initRelatorioPage);
} else {
  initRelatorioPage();
}

// Exportar fun√ß√µes para uso global
window.RelatorioOptimizado = {
  initRelatorioPage,
  getCachedElement,
  throttle,
  debounce,
};
